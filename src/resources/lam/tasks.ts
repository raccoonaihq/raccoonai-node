// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';

export class Tasks extends APIResource {
  /**
   * Get Tasks Endpoint
   */
  all(query?: TaskAllParams, options?: Core.RequestOptions): Core.APIPromise<TaskAllResponse>;
  all(options?: Core.RequestOptions): Core.APIPromise<TaskAllResponse>;
  all(
    query: TaskAllParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<TaskAllResponse> {
    if (isRequestOptions(query)) {
      return this.all({}, query);
    }
    return this._client.get('/lam/tasks', { query, ...options });
  }

  /**
   * Get Task Media Endpoint
   */
  media(taskId: string, options?: Core.RequestOptions): Core.APIPromise<TaskMediaResponse> {
    return this._client.get(`/lam/tasks/${taskId}/media`, options);
  }
}

export interface TaskAllResponse {
  /**
   * Metadata about the task list.
   */
  meta: TaskAllResponse.Meta;

  /**
   * List of tasks.
   */
  tasks: Array<TaskAllResponse.Task>;
}

export namespace TaskAllResponse {
  /**
   * Metadata about the task list.
   */
  export interface Meta {
    /**
     * The current page number.
     */
    currentPage: number;

    /**
     * Total number of pages available.
     */
    totalPages: number;

    /**
     * Total number of records across all pages.
     */
    totalRecords: number;
  }

  export interface Task {
    /**
     * Time taken for the task execution (in seconds).
     */
    executionTime: number;

    /**
     * The type of execution performed (e.g., 'default', 'deepsearch').
     */
    executionType: 'default' | 'deepsearch';

    /**
     * Input parameters used for the task execution.
     */
    inputs: unknown;

    /**
     * Output generated by the task execution.
     */
    output: Array<unknown>;

    /**
     * Passcode associated with the user.
     */
    raccoonPasscode: string;

    /**
     * Unique identifier for the task.
     */
    taskId: string;

    /**
     * Unix timestamp (in seconds) indicating when the task was created.
     */
    timestamp: number;
  }
}

export interface TaskMediaResponse {
  /**
   * A list of media data, including actions and recordings.
   */
  media: Array<TaskMediaResponse.Media>;

  /**
   * A unique identifier for the task.
   */
  taskId: string;
}

export namespace TaskMediaResponse {
  export interface Media {
    /**
     * A list of actions performed, not applicable to fleet sessions.
     */
    actions: Array<Media.Action>;

    /**
     * A list of recordings associated.
     */
    recordings: Array<Media.Recording>;

    /**
     * A unique identifier for the session.
     */
    sessionId: string;
  }

  export namespace Media {
    export interface Action {
      /**
       * The type of action performed, e.g., 'click'.
       */
      action: string;

      /**
       * The sequential index of the action.
       */
      index: number;

      /**
       * URL of the screenshot taken at the time of the action.
       */
      screenshot: string;
    }

    export interface Recording {
      /**
       * The title of the webpage where the recording took place.
       */
      pageTitle: string;

      /**
       * The URL of the webpage where the recording took place.
       */
      pageUrl: string;

      /**
       * URL of the recording file.
       */
      url: string;
    }
  }
}

export interface TaskAllParams {
  /**
   * Filter tasks created before this Unix timestamp (in milliseconds).
   */
  end_time?: number | null;

  /**
   * Filter tasks by execution type (e.g., 'default', 'deepsearch').
   */
  executionType?: Array<'default' | 'deepsearch' | 'fleet'> | null;

  /**
   * Number of tasks per page (maximum 100).
   */
  limit?: number | null;

  /**
   * Page number for pagination.
   */
  page?: number | null;

  /**
   * Filter tasks by Raccoon passcode.
   */
  raccoon_passcode?: string | null;

  /**
   * Field to sort tasks by (e.g., 'timestamp', 'executionTime').
   */
  sort_by?: 'timestamp' | 'executionTime' | 'taskId' | 'status' | 'executionType' | null;

  /**
   * Sort order ('ascend' or 'descend').
   */
  sort_order?: 'ascend' | 'descend' | null;

  /**
   * Filter tasks created after this Unix timestamp (in milliseconds).
   */
  start_time?: number | null;

  /**
   * Filter tasks by a specific task ID.
   */
  task_id?: string | null;
}

export declare namespace Tasks {
  export {
    type TaskAllResponse as TaskAllResponse,
    type TaskMediaResponse as TaskMediaResponse,
    type TaskAllParams as TaskAllParams,
  };
}
