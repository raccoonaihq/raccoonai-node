// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../resource';
import { isRequestOptions } from '../core';
import { APIPromise } from '../core';
import * as Core from '../core';
import * as LamAPI from './lam';
import { Stream } from '../streaming';

export class Lam extends APIResource {
  /**
   * Lam Run Endpoint
   */
  run(body: LamRunParamsNonStreaming, options?: Core.RequestOptions): APIPromise<LamRunResponse>;
  run(body: LamRunParamsStreaming, options?: Core.RequestOptions): APIPromise<Stream<LamRunResponse>>;
  run(
    body: LamRunParamsBase,
    options?: Core.RequestOptions,
  ): APIPromise<Stream<LamRunResponse> | LamRunResponse>;
  run(
    body: LamRunParams,
    options?: Core.RequestOptions,
  ): APIPromise<LamRunResponse> | APIPromise<Stream<LamRunResponse>> {
    return this._client.post('/lam/run', { body, ...options, stream: body.stream ?? false }) as
      | APIPromise<LamRunResponse>
      | APIPromise<Stream<LamRunResponse>>;
  }

  /**
   * Get Tasks Endpoint
   */
  tasks(query?: LamTasksParams, options?: Core.RequestOptions): Core.APIPromise<LamTasksResponse>;
  tasks(options?: Core.RequestOptions): Core.APIPromise<LamTasksResponse>;
  tasks(
    query: LamTasksParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<LamTasksResponse> {
    if (isRequestOptions(query)) {
      return this.tasks({}, query);
    }
    return this._client.get('/lam/tasks', { query, ...options });
  }
}

export interface LamRunResponse {
  /**
   * The extracted data as a list of objects when the status is DONE. Each object
   * represents an extracted entity.
   */
  data: Array<unknown>;

  /**
   * The Livestream URL
   */
  livestream_url: string;

  /**
   * A message providing the thought summary if the status is processing currently.
   */
  message: string;

  /**
   * Additional metadata or details related to the run task.
   */
  properties: unknown;

  /**
   * The current status of the extraction task. For example: 'STARTING',
   * 'PROCESSING', 'DONE', 'HUMAN_INTERACTION', or 'FAILURE'.
   */
  task_status: 'STARTING' | 'PROCESSING' | 'DONE' | 'HUMAN_INTERACTION' | 'FAILURE';
}

export interface LamTasksResponse {
  /**
   * Metadata about the task list.
   */
  meta: LamTasksResponse.Meta;

  /**
   * List of tasks.
   */
  tasks: Array<LamTasksResponse.Task>;
}

export namespace LamTasksResponse {
  /**
   * Metadata about the task list.
   */
  export interface Meta {
    /**
     * The current page number.
     */
    currentPage: number;

    /**
     * Total number of pages available.
     */
    totalPages: number;

    /**
     * Total number of records across all pages.
     */
    totalRecords: number;
  }

  export interface Task {
    /**
     * Time taken for the task execution (in seconds).
     */
    executionTime: number;

    /**
     * The type of execution performed (e.g., 'run', 'extract').
     */
    executionType: 'run' | 'extract';

    /**
     * Input parameters used for the task execution.
     */
    inputs: unknown;

    /**
     * Output generated by the task execution.
     */
    output: Array<unknown>;

    /**
     * Passcode associated with the user.
     */
    raccoonPasscode: string;

    /**
     * Unique identifier for the task.
     */
    taskId: string;

    /**
     * Unix timestamp (in seconds) indicating when the task was created.
     */
    timestamp: number;
  }
}

export type LamRunParams = LamRunParamsNonStreaming | LamRunParamsStreaming;

export interface LamRunParamsBase {
  /**
   * The input query string for the request. This is typically the main prompt.
   */
  query: string;

  /**
   * The raccoon passcode associated with the end user on behalf of which the call is
   * being made.
   */
  raccoon_passcode: string;

  /**
   * Advanced configuration options for the session, such as ad-blocking and CAPTCHA
   * solving.
   */
  advanced?: LamRunParams.Advanced | null;

  /**
   * This is the entrypoint URL for the web agent.
   */
  app_url?: string | null;

  /**
   * The history of the conversation as a list of messages or objects you might use
   * while building a chat app to give the model context of the past conversation.
   */
  chat_history?: Array<unknown> | null;

  /**
   * The maximum number of results to extract.
   */
  max_count?: number | null;

  /**
   * Mode of execution.
   */
  mode?: 'deepsearch' | 'default' | null;

  /**
   * The expected schema for the response. This is a dictionary where the keys
   * describe the fields and the values describe their purposes.
   */
  schema?: unknown;

  /**
   * Whether the response should be streamed back or not.
   */
  stream?: boolean | null;
}

export namespace LamRunParams {
  /**
   * Advanced configuration options for the session, such as ad-blocking and CAPTCHA
   * solving.
   */
  export interface Advanced {
    /**
     * Whether to block advertisements during the browser session.
     */
    block_ads?: boolean | null;

    /**
     * list of extension ids
     */
    extension_ids?: Array<unknown> | null;

    /**
     * Proxy details for the browser session.
     */
    proxy?: Advanced.Proxy | null;

    /**
     * Whether to attempt automatic CAPTCHA solving.
     */
    solve_captchas?: boolean | null;
  }

  export namespace Advanced {
    /**
     * Proxy details for the browser session.
     */
    export interface Proxy {
      /**
       * Target city.
       */
      city?: string | null;

      /**
       * Target country (2-letter ISO code).
       */
      country?: string | null;

      /**
       * Whether to use a proxy for the browser session.
       */
      enable?: boolean;

      /**
       * Target state (2-letter code).
       */
      state?: string | null;

      /**
       * Target postal code.
       */
      zip?: number | null;
    }
  }

  export type LamRunParamsNonStreaming = LamAPI.LamRunParamsNonStreaming;
  export type LamRunParamsStreaming = LamAPI.LamRunParamsStreaming;
}

export interface LamRunParamsNonStreaming extends LamRunParamsBase {
  /**
   * Whether the response should be streamed back or not.
   */
  stream?: false | null;
}

export interface LamRunParamsStreaming extends LamRunParamsBase {
  /**
   * Whether the response should be streamed back or not.
   */
  stream: true;
}

export interface LamTasksParams {
  /**
   * Filter tasks created before this Unix timestamp (in milliseconds).
   */
  end_time?: number | null;

  /**
   * Filter tasks by execution type (e.g., 'run', 'extract').
   */
  executionType?: Array<'run' | 'extract' | 'fleet'> | null;

  /**
   * Number of tasks per page (maximum 100).
   */
  limit?: number | null;

  /**
   * Page number for pagination.
   */
  page?: number | null;

  /**
   * Filter tasks by Raccoon passcode.
   */
  raccoon_passcode?: string | null;

  /**
   * Field to sort tasks by (e.g., 'timestamp', 'executionTime').
   */
  sort_by?: 'timestamp' | 'executionTime' | 'taskId' | 'status' | 'executionType' | null;

  /**
   * Sort order ('ascend' or 'descend').
   */
  sort_order?: 'ascend' | 'descend' | null;

  /**
   * Filter tasks created after this Unix timestamp (in milliseconds).
   */
  start_time?: number | null;

  /**
   * Filter tasks by a specific task ID.
   */
  task_id?: string | null;
}

export declare namespace Lam {
  export {
    type LamRunResponse as LamRunResponse,
    type LamTasksResponse as LamTasksResponse,
    type LamRunParams as LamRunParams,
    type LamRunParamsNonStreaming as LamRunParamsNonStreaming,
    type LamRunParamsStreaming as LamRunParamsStreaming,
    type LamTasksParams as LamTasksParams,
  };
}
